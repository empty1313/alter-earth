## **ARACHNE & M.A.R.S. 통합 데이터베이스 설계 가이드라인 v2.0**

이 문서는 아라크네(ARACHNE) 및 마르스(M.A.R.S.) 시스템에서 사용되는 모든 데이터베이스 테이블의 구조와 규칙을 정의합니다. 두 시스템 간의 유기적인 데이터 연동을 목표로 합니다. 모든 콘텐츠 생성 및 데이터 입력은 이 가이드라인을 따라야 합니다.

---

### **1. 게이트 관련 테이블**

게이트(던전)의 기본 정보, 내부 구조, 연결 관계, 상세 설명을 정의합니다.

#### **1.1. `gates.csv`**
*   **설명:** 시스템에 존재하는 모든 게이트의 최상위 정보를 관리합니다.
*   **컬럼:**
    *   `index` (int): 데이터 행의 고유 번호.
    *   `id` (string): 게이트의 고유 식별자 **(ID 규칙: `G-001` 부터 시작)**.
    *   `name` (string): 게이트의 공식 명칭.
    *   `category` (string): 데이터 분류용 타입. **`gates`로 고정**.
    *   `rank` (string): 게이트의 위험 등급 (S, A, B, C, D, E).
    *   `isActive` (boolean): 현재 활성화된 게이트인지 여부 (`TRUE` / `FALSE`).
    *   `location` (string): 현실 세계에서의 게이트 발생 위치.
    *   `desc` (string): 게이트에 대한 개괄적인 설명.

#### **1.2. `rooms.csv`**
*   **설명:** 각 게이트를 구성하는 모든 방(구역)의 물리적/지도상 정보를 정의합니다.
*   **컬럼:**
    *   `index` (int): 데이터 행의 고유 번호.
    *   `GID` (string): 이 방이 속한 게이트의 ID (Foreign Key, `gates.id`).
    *   `id` (string): 방의 고유 식별자 (영문 소문자와 `_` 사용, 예: `entrance_hall`).
    *   `name` (string): 맵에 표시될 방의 간략한 이름 (예: "입구 홀").
    *   `floor` (int): 방이 위치한 층수 (지상 1층 = `1`, 지하 1층 = `0`, 지하 2층 = `-1`).
    *   `x`, `y` (int): 2D 맵에서의 방의 좌측 상단 좌표.
    *   `w`, `h` (int): 2D 맵에서의 방의 너비와 높이.
    *   `IsStart` (boolean): 해당 방이 게이트의 시작 지점인지 여부.

#### **1.3. `connectors.csv`**
*   **설명:** 방과 방 사이의 연결 관계(통로)를 정의합니다.
*   **컬럼:**
    *   `index` (int): 데이터 행의 고유 번호.
    *   `GID` (string): 이 연결이 속한 게이트의 ID (Foreign Key, `gates.id`).
    *   `FromID` (string): 연결이 시작되는 방의 ID (Foreign Key, `rooms.id`).
    *   `ToID` (string): 연결이 끝나는 방의 ID (Foreign Key, `rooms.id`).

#### **1.4. `details.csv`**
*   **설명:** 각 방의 상세한 설정과 분위기를 묘사하는 텍스트 정보를 관리합니다.
*   **컬럼:**
    *   `index` (int): 데이터 행의 고유 번호.
    *   `RoomID` (string): 이 설명이 속한 방의 ID (Foreign Key, `rooms.id`).
    *   `RoomName` (string): 인스펙터 창 등에 표시될 방의 공식적인 전체 이름. (예: "부서진 대강당").
    *   `type` (string): 방의 역할이나 특징을 나타내는 부가 정보.  (예: "1F / 전투 구역", "B1 / 함정 지대").
    *   `dec` (string): 방의 분위기나 상황을 묘사하는 상세한 설명.

---

### **2. 엔티티 관련 테이블**

게이트 내부에 배치되는 몬스터, 아이템, 이벤트 등의 개별 엔티티 정보를 정의합니다.

#### **2.1. `elements.csv`**
*   **설명:** "어떤 방에 무엇이 있는지"를 정의하는 핵심 테이블. 모든 정적 엔티티 배치는 이 테이블을 통해 이루어집니다.
*   **컬럼:**
    *   `index` (int): 데이터 행의 고유 번호.
    *   `RoomID` (string): 해당 엔티티가 배치된 방의 ID (Foreign Key, `rooms.id`).
    *   `type` (string): 배치된 엔티티의 종류 (`monster`, `boss`, `item`, `trap`, `event`).
    *   `refId` (string): 배치된 엔티티의 고유 ID (Foreign Key, `monster.id`, `item.id` 등).
    *   `quantity` (int): 해당 엔티티의 수량.
    *   `desc` (string): 배치 상황에 대한 간략한 설명 (예: "숨겨진 보물 상자", "천장에서 기습").

#### **2.2. `monster.csv`**
*   **설명:** 게임에 등장하는 모든 몬스터와 보스의 기본 정보를 관리합니다.
*   **컬럼:**
    *   `index` (int): 데이터 행의 고유 번호.
    *   `ID` (string): 몬스터의 고유 식별자.
        *   **ID 규칙:**
            *   일반 몬스터: **`M-ETC001`** 부터 시작.
            *   보스 몬스터: **`B-[게이트ID]-[SUB/MAIN]`** (예: `B-G001-MAIN`).
    *   `name` (string): 몬스터의 이름.
    *   `category` (string): 몬스터의 종류. **`monster` 또는 `boss`**.
    *   `rank` (string): 몬스터의 위험 등급 (S, A, B, C, D, E).
    *   `habit` (string): 주로 출현하는 서식지나 환경.
    *   `weak` (string): 몬스터의 약점 속성 (키워드 형식, 예: `[빛]`, `[물리 타격]`).
    *   `desc` (string): 몬스터에 대한 상세한 설명.


#### **2.3. `item.csv`**
*   **설명:** 획득 가능한 모든 아이템의 정보를 관리합니다.
*   **컬럼:**
    *   `index` (int): 데이터 행의 고유 번호.
    *   `ID` (string): 아이템의 고유 식별자.
        *   **ID 규칙:**
            *   일반 아이템: **`I-001`** 부터 시작.
            *   재료 아이템: **`R-001`** 부터 시작.
            *   장비 아이템: **`E-001`** 부터 시작.
            *   특수 아이템: **`S-001`** 부터 시작.
    *   `name` (string): 아이템의 이름.
    *   `category` (string): 데이터 분류용 타입. **`item`으로 고정**.
    *   `rank` (string): 아이템의 등급 (S, A, B, C, D, E).
    *   `desc` (string): 아이템에 대한 상세한 설명.


#### **2.4. `event.csv`**
*   **설명:** 게이트 내에서 발생하는 모든 이벤트와 함정의 정보를 관리합니다.
*   **컬럼:**
    *   `index` (int): 데이터 행의 고유 번호.
    *   `ID` (string): 이벤트/함정의 고유 식별자.
        *   **ID 규칙:**
            *   이벤트: **`EV-001`** 부터 시작.
            *   함정: **`T-001`** 부터 시작.
    *   `name` (string): 이벤트/함정의 이름.
    *   `category` (string): 종류 구분. **`Event` or `Trap`**.
    *   `desc` (string): 이벤트/함정에 대한 상세한 설명.

---

### **3. 동적 상호작용 테이블 (Dynamic Interaction Tables)**

#### **3.1. `scenarios.csv` **
*   **설명:** **게이트의 '대본'.** 특정 방, 구역, 또는 게이트 전체에 걸쳐 발생하는 동적인 기믹, 연출, 환경 효과를 정의합니다. ARACHNE 웹에서 '장소 중심'으로 정보를 조회할 때 핵심적인 역할을 합니다.
*   **컬럼:**
    *   `index` (int): 데이터 행의 고유 번호.
    *   `id` (string): 시나리오/기믹의 고유 식별자 **(ID 규칙: `SCN-001` 부터 시작)**.
    *   `GID` (string): 이 시나리오가 속한 게이트의 ID (Foreign Key, `gates.id`).
    *   `scope` (string): 시나리오의 적용 범위 (`ROOM`: 특정 방, `GATE-WIDE`: 게이트 전체, `PHASE`: 특정 공략 단계).
    *   `scope_id` (string): 적용 범위의 구체적인 대상 ID (`scope`가 `ROOM`이면 `rooms.id`, `GATE-WIDE`이면 `GID`와 동일).
    *   `category` (string): 시나리오의 성격 (`Gimmick`: 상호작용 기믹, `Atmosphere`: 분위기 연출, `Condition`: 상태 변화).
    *   `linked_entities` (string): 이 시나리오와 직접적으로 관련된 엔티티의 `refId` 목록. 쉼표(`,`)로 구분. (예: `M-ETC002,T-001`).
    *   `description` (string): 위키 관리자 및 GM을 위한 최종 서술형 설명 (예: "소음 레벨이 5를 초과하면, 숨어있던 '고철 고블린' 2마리가 추가로 나타난다.").

#### **3.2. `protocols.csv`**
*   **설명:** **몬스터의 '지침서'.** 각 몬스터의 전투 패턴뿐만 아니라, 비전투 시의 행동, 특수 조건에서의 반응, 환경과의 상호작용 등 모든 동적인 행동을 정의합니다. M.A.R.S. 시스템에서 '개체 중심'으로 정보를 조회할 때 핵심적인 역할을 합니다.
*   **컬럼:**
    *   `index` (int): 데이터 행의 고유 번호.
    *   `MonsterID` (string): 이 프로토콜이 적용되는 몬스터의 ID (Foreign Key, `monster.ID`).
    *   `Step` (int): 프로토콜의 단계 순서.
    *   `Phase` (string): 단계의 이름.  `초기 대응`, `교전 수칙`, `특수 패턴`
    *   `linked_scenario` (string): 이 프로토콜의 행동이 특정 시나리오와 직접적으로 연관될 경우, 해당 `scenarios.id`를 기록. (예: `SCN-002`).
    *   `desc` (string): 해당 단계에서 수행해야 할 구체적인 지시 사항 및 설명.

---

### **4. 시스템 간 정보 흐름 (v2.0)**

1.  **ARACHNE 웹 (게이트 중심):**
    *   사용자가 특정 `Room`을 선택하면, 시스템은 `details.csv` (기본 설명), `elements.csv` (정적 배치물), 그리고 **`scenarios.csv` (동적 기믹/연출)**를 모두 조회하여 인스펙터 창에 통합 표시한다.
    *   `scenarios.csv`에 표시된 `linked_entities` ID를 클릭하면, M.A.R.S.의 해당 엔티티 정보로 연결된다.

2.  **M.A.R.S. (개체 중심):**
    *   사용자가 특정 `Monster`를 선택하면, 시스템은 `monster.csv` (기본 정보)와 **`protocols.csv` (모든 행동 지침)**를 모두 조회하여 분석 보고서를 생성한다.
    *   `protocols.csv`에 표시된 `linked_scenario` ID를 클릭하면, ARACHNE 웹의 해당 기믹 정보 또는 관련 게이트/방 정보로 연결된다.

이로써, 두 시스템은 `scenarios.csv`와 `protocols.csv`를 통해 서로의 데이터를 상호 참조하며, 사용자는 게이트의 구조부터 몬스터의 세부 행동 패턴까지 끊김 없이 탐색할 수 있는 완전한 정보 생태계를 경험하게 됩니다.